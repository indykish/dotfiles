---
- name: Workstation Setup
  hosts: localhost
  gather_facts: true
  become: false

  vars:
    home_dir: "{{ ansible_env.HOME }}"
    install_dir: "{{ ansible_env.HOME }}/bin"
    version_log: "{{ ansible_env.HOME }}/bin/dotfile-runs.txt"
    ollama_url: https://ollama.com/download/ollama-linux-amd64.tgz
    ollama_file: "{{ install_dir }}/ollama-linux-amd64.tgz"
    plantuml_jar: "{{ install_dir }}/plantuml.jar"
    aur_packages:
      - flameshot
      - libreoffice-fresh
      - jdk-temurin
      - docker
      - docker-buildx
      - docker-compose
      - ttf-nerd-fonts-symbols
      - ttf-nerd-fonts-symbols-common

  tasks:
    # Ensure directory structure exists
    - name: Ensure required directories exist
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ install_dir }}"
        - "{{ ansible_env.HOME }}/code/py"
        - "{{ ansible_env.HOME }}/code/node"
        - "{{ ansible_env.HOME }}/code/rust"
        - "{{ ansible_env.HOME }}/.config/autostart"

    # Ensure git is present for AUR build process
    - name: Ensure git is installed for AUR build
      pacman:
        name: git
        state: present

    # Clone and build trizen from AUR
    - name: Clone trizen AUR repository
      git:
        repo: https://aur.archlinux.org/trizen.git
        dest: "{{ ansible_env.HOME }}/aur-builds/trizen"
        clone: yes
        update: no

    - name: Build and install trizen from AUR
      become: false
      shell: |
        cd "{{ ansible_env.HOME }}/aur-builds/trizen"
        makepkg -si --noconfirm
      args:
        creates: /usr/bin/trizen

    # Install oh-my-posh and Nerd Fonts
    - name: Install oh-my-posh
      shell: |
        trizen -Syy
        curl -s https://ohmyposh.dev/install.sh | bash -s -- -d ~/bin
      args:
        executable: /bin/bash

    - name: Initialize oh-my-posh with jandedobbeleer theme in bashrc if not already present
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'eval "$(oh-my-posh init bash --config ~/.cache/oh-my-posh/themes/jandedobbeleer.omp.json)"'
        state: present
        create: yes

    # Install AUR packages conditionally
    - name: Check if AUR packages are installed
      shell: pacman -Q {{ item }}
      register: check_aur
      loop: "{{ aur_packages }}"
      changed_when: false
      failed_when: false

    - name: Install AUR packages via trizen if missing
      shell: trizen -S --noconfirm {{ item.item }}
      loop: "{{ check_aur.results }}"
      when: item.rc != 0
      args:
        executable: /bin/bash

    # Install tools and languages via mise
    - name: Use mise to install tools and languages
      shell: |
        mise install -v caddy shellcheck jq shfmt python node ruby rust cargo mkcert cfssl go 
        mise use -g -v caddy shellcheck jq shfmt python node ruby rust cargo mkcert cfssl go
        mise list -v > {{ version_log }}
      args:
        executable: /bin/bash

    # Install Visual Studio Code via pacman
    - name: Install VSCode
      become: true
      pacman:
        name: code
        state: present

    # Ruby gem configuration
    - name: Copy custom .gemrc
      copy:
        content: |
          :backtrace: false
          :bulk_threshold: 1000
          :sources:
          - https://rubygems.org
          :update_sources: true
          :verbose: true
        dest: "{{ ansible_env.HOME }}/.gemrc"
        mode: "0644"

    # Git configuration files
    - name: Download .gitconfig
      get_url:
        url: https://raw.githubusercontent.com/indykish/dotfiles/master/.gitconfig
        dest: "{{ ansible_env.HOME }}/.gitconfig"
        mode: "0644"

    - name: Download .gitignore_global
      get_url:
        url: https://raw.githubusercontent.com/indykish/dotfiles/master/.gitignore_global
        dest: "{{ ansible_env.HOME }}/.gitignore_global"
        mode: "0644"

    # Download PlantUML only if not present
    - name: Ensure PlantUML jar is present
      get_url:
        url: "https://github.com/plantuml/plantuml/releases/download/v1.2025.2/plantuml.jar"
        dest: "{{ plantuml_jar }}"
        mode: "0644"
      when: not plantuml_jar is exists

    # Gnome shell enhancements
    - name: Install Gnome App Indicator
      become: true
      pacman:
        name:
          - gnome-shell-extensions
          - gnome-tweaks
          - gnome-shell-extension-appindicator
        state: present

    # Ollama download and installation
    - name: Get remote Ollama tarball metadata
      uri:
        url: "{{ ollama_url }}"
        method: HEAD
        return_content: no
      register: ollama_remote

    - name: Get local Ollama tarball stat
      stat:
        path: "{{ ollama_file }}"
      register: ollama_local

    - name: Download Ollama tarball if remote is newer or missing locally
      get_url:
        url: "{{ ollama_url }}"
        dest: "{{ ollama_file }}"
        mode: "0644"
      when: ollama_local.stat.exists == false or (
              ollama_remote['headers']['Last-Modified'] is defined and
              (ollama_remote['headers']['Last-Modified'] | to_datetime('%a, %d %b %Y %H:%M:%S %Z') > (ollama_local.stat.mtime | to_datetime('%s')))
            )

    - name: Extract Ollama binary to ~/bin
      unarchive:
        src: "{{ ollama_file }}"
        dest: "{{ home_dir }}"
        remote_src: yes
        mode: '0755'

    - name: Ensure Ollama binary is executable
      file:
        path: "{{ home_dir }}/bin/ollama"
        mode: '0755'
        state: file
